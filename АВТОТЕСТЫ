I.
    1. Статус код 200:
       pm.test("Status code is 200", function () {
            pm.response.to.have.status(200);
        });

    2. Проверить, что в body приходит правильный string:
       let response = "This is the first responce from server!";
       pm.test("json_body", function () {
            pm.expect(response).to.eql('This is the first responce from server!')
            });

II.
    1. Спарсить response body в json:
       let jsonData = pm.response.json();
       
    2. Спарсить request:
       let req = request.data;

    3. Проверить, что json response имеет параметр start_qa_salary:
       pm.test("chek_start_qa_salary", function () {
            pm.expect(JSON.stringify(jsonData)).to.include("start_qa_salary");
        });
    
    4. Проверить, что json response имеет параметр qa_salary_after_6_months:
       pm.test("chek_qa_salary_after_6_months", function () {
            pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_6_months");
        });

    5. Проверить, что json response имеет параметр qa_salary_after_12_months:
       pm.test("chek_qa_salary_after_6_months", function () {
            pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_6_months");
        });

    6. Проверить, что json response имеет параметр qa_salary_after_1.5_year:
       pm.test("chek_qa_salary_after_1.5_year", function () {
            pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_1.5_year");
        });

    7. Проверить, что json response имеет параметр qa_salary_after_3.5_years:
       pm.test("chek_qa_salary_after_3.5_years", function () {
            pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_3.5_years");
        });

    8. Проверить, что json response имеет параметр person:
       pm.test("chek_person", function () {
            pm.expect(JSON.stringify(jsonData)).to.include("person");
        });
        
    9. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request):
       let req_salary = req.salary;
       let resp_start_qa_salary = jsonData.start_qa_salary;
       pm.test("check_eql_start_qa_salary", function (){
            pm.expect(JSON.stringify(resp_start_qa_salary)).to.eql(req_salary);
        });

    10. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request):
        let req_qa_salary_after_6_months = req.salary*2;
        let resp_qa_salary_after_6_months = jsonData.qa_salary_after_6_months;
        pm.test("check_eql_qa_salary_after_6_months", function (){
            pm.expect(+JSON.stringify(resp_qa_salary_after_6_months)).to.eql(+req_qa_salary_after_6_months);
        });

    11. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request):
        let req_qa_salary_after_12_months = req.salary*2.7;
        let resp_qa_salary_after_12_months = jsonData.qa_salary_after_12_months;
        pm.test("check_eql_qa_salary_after_12_months", function (){
            pm.expect(+JSON.stringify(resp_qa_salary_after_12_months)).to.eql(+req_qa_salary_after_12_months);
        });

    12. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request):
        let req_qa_salary_after_poltora = req.salary*3.3;
        let resp_qa_salary_after_poltora = "jsonData.qa_salary_after_1.5_year";
        pm.test("check_eql_qa_salary_after_poltora", function (){
            pm.expect(+JSON.stringify(resp_qa_salary_after_poltora)).to.eql(+"req_qa_salary_after_poltora");
        });

    13. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request):
        let req_qa_salary_after_42_month = req.salary*3.5;
        let resp_qa_salary_after_42_month = "jsonData.qa_salary_after_3.5_years";
        pm.test("check_eql_qa_salary_after_3.5_years", function (){
            pm.expect(+JSON.stringify(resp_qa_salary_after_42_month)).to.eql(+"req_qa_salary_after_42_month");
        });

    14. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request):
        let resp_u_name = ["Mariya", 1000, 34]
        pm.test("u_name", function (){
            pm.expect(JSON.stringify(resp_u_name[1])).to.eql(req_salary);
        });

    15. Проверить, что что параметр u_age равен age из request (age забрать из request):
        let u_age = jsonData.person.u_age;
        let req_age = req.age;
        pm.test("u_age", function (){
            pm.expect(JSON.stringify(u_age)).to.eql(req_age);
        });

    16. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request):
        let u_salary_5_years = jsonData.person.u_salary_5_years;
        let req_salary_5_years = req.salary*4.2;
        pm.test("u_salary_5_years", function (){
            pm.expect(u_salary_5_years).to.eql(req_salary_5_years);
        });

    17. 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person:
        let person_array = jsonData.person;
        for(let i=0; i < person_array.length; i++){
            console.log(i, person_array[i]);
        };
