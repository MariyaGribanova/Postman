{
	"info": {
		"_postman_id": "214c073b-99e6-48fe-8996-89e82017ebfe",
		"name": "Postman. HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21437519"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string:\r",
							"let response = \"This is the first responce from server!\";\r",
							"pm.test(\"json_body\", function () {\r",
							"    pm.expect(response).to.eql('This is the first responce from server!')\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json:\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками):\r",
							"let resp_name = jsonData.name;\r",
							"pm.test(\"resp_name_test\", function(){\r",
							"    pm.expect(resp_name).to.eql(\"Mariya\")\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками):\r",
							"let resp_age = jsonData.age;\r",
							"pm.test(\"resp_age_test\", function(){\r",
							"    pm.expect(resp_age).to.eql(\"34\")\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками):\r",
							"let resp_salary = jsonData.salary;\r",
							"pm.test(\"resp_salary_test\", function(){\r",
							"    pm.expect(resp_salary).to.eql(1000)\r",
							"});\r",
							"\r",
							"// 7. Спарсить request:\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request):\r",
							"let req_name = req.name;\r",
							"pm.test(\"req_name_test\", function(){\r",
							"    pm.expect(req_name).to.eql(resp_name)\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request):\r",
							"let req_age = req.age;\r",
							"pm.test(\"resp_age_test\", function(){\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request):\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"resp_salary_test\", function(){\r",
							"    pm.expect(+req_salary).to.eql(+resp_salary) \r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response:\r",
							"let resp_family = jsonData.family;\r",
							"console.log(\"family =\", resp_family);\r",
							"\r",
							"//  12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):\r",
							"let resp_salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"let req_salary_1_5 = req_salary*4\r",
							"pm.test(\"Salary_4\", function (){\r",
							"    pm.expect(req_salary_1_5).to.eql(resp_salary_1_5);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mariya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json:\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request:\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request):\r",
							"let resp_name = jsonData.name;\r",
							"let req_name = req.name;\r",
							"pm.test(\"check_resp_name\", function(){\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request):\r",
							"let resp_age = jsonData.age;\r",
							"let req_age = req.age;\r",
							"pm.test(\"check_resp_age\", function(){\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request):\r",
							"let req_salary = req.salary;\r",
							"let resp_salary = jsonData.salary;\r",
							"pm.test(\"check_resp_salary\", function(){\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response:\r",
							"let resp_family = jsonData.family;\r",
							"console.log(\"family =\", resp_family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name:\r",
							"let dog_name = jsonData.family.pets.dog;\r",
							"pm.test(\"Check dog name\", function () {\r",
							"    pm.expect(JSON.stringify(dog_name)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age:\r",
							"let dog_age = jsonData.family.pets.dog;\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(+JSON.stringify(dog_age)).to.eql(+\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky:\r",
							"let chek_Luky = jsonData.family.pets.dog.name;\r",
							"pm.test(\"Check Luky name\", function () {\r",
							"    pm.expect(chek_Luky).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4:\r",
							"let chek_age = jsonData.family.pets.dog.age;\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(JSON.stringify(chek_age)).to.include(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Mariya&age=34&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mariya"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json:\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request:\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request):\r",
							"let resp_name = jsonData.name;\r",
							"let req_name = req.name;\r",
							"pm.test(\"check_resp_name\", function(){\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request):\r",
							"let resp_age = jsonData.age;\r",
							"let req_age = req.age;\r",
							"pm.test(\"check_resp_age\", function(){\r",
							"    pm.expect(JSON.stringify(resp_age)).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request:\r",
							"let req_salary = req.salary;\r",
							"console.log(\"req_salary\", req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response:\r",
							"let resp_salary = jsonData.salary;\r",
							"console.log(\"resp_salary\", resp_salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response:\r",
							"console.log(\"zero_element\", resp_salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response:\r",
							"console.log(\"first_element\", resp_salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response:\r",
							"console.log(\"second_element\", resp_salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request):\r",
							"pm.test(\"Zero people\", function (){\r",
							"    pm.expect(JSON.stringify(resp_salary[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request):\r",
							"let double_salary = req_salary*2;\r",
							"pm.test(\"salary_2\", function (){\r",
							"    pm.expect(+resp_salary[1]).to.eql(+double_salary);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request):\r",
							"let triple_salary = req_salary*3;\r",
							"pm.test(\"salary_3\", function (){\r",
							"    pm.expect(+resp_salary[2]).to.eql(+triple_salary);\r",
							"});\r",
							"\r",
							"// 15_18. Создать и передать в окружение переменную name:\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"// 16-17. Создать в окружении переменную age:\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"// 17-19. Создать в окружении переменную salary:\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:\r",
							"let salary_array = jsonData.salary;\r",
							"for(let i=0; i < salary_array.length; i++){\r",
							"    console.log(i, salary_array[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Mariya&age=34&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mariya"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json:\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request:\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary:\r",
							"pm.test(\"chek_start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months:\r",
							"pm.test(\"chek_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months:\r",
							"pm.test(\"chek_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year:\r",
							"pm.test(\"chek_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years:\r",
							"pm.test(\"chek_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person:\r",
							"pm.test(\"chek_person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request):\r",
							"let req_salary = req.salary;\r",
							"let resp_start_qa_salary = jsonData.start_qa_salary;\r",
							"pm.test(\"check_eql_start_qa_salary\", function (){\r",
							"    pm.expect(JSON.stringify(resp_start_qa_salary)).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request):\r",
							"let req_qa_salary_after_6_months = req.salary*2;\r",
							"let resp_qa_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
							"pm.test(\"check_eql_qa_salary_after_6_months\", function (){\r",
							"    pm.expect(+JSON.stringify(resp_qa_salary_after_6_months)).to.eql(+req_qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request):\r",
							"let req_qa_salary_after_12_months = req.salary*2.7;\r",
							"let resp_qa_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
							"pm.test(\"check_eql_qa_salary_after_12_months\", function (){\r",
							"    pm.expect(+JSON.stringify(resp_qa_salary_after_12_months)).to.eql(+req_qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request):\r",
							"let req_qa_salary_after_poltora = req.salary*3.3;\r",
							"let resp_qa_salary_after_poltora = \"jsonData.qa_salary_after_1.5_year\";\r",
							"pm.test(\"check_eql_qa_salary_after_poltora\", function (){\r",
							"    pm.expect(+JSON.stringify(resp_qa_salary_after_poltora)).to.eql(+\"req_qa_salary_after_poltora\");\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request):\r",
							"let req_qa_salary_after_42_month = req.salary*3.5;\r",
							"let resp_qa_salary_after_42_month = \"jsonData.qa_salary_after_3.5_years\";\r",
							"pm.test(\"check_eql_qa_salary_after_3.5_years\", function (){\r",
							"    pm.expect(+JSON.stringify(resp_qa_salary_after_42_month)).to.eql(+\"req_qa_salary_after_42_month\");\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request):\r",
							"let resp_u_name = [\"Mariya\", 1000, 34]\r",
							"pm.test(\"u_name\", function (){\r",
							"    pm.expect(JSON.stringify(resp_u_name[1])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request):\r",
							"let u_age = jsonData.person.u_age;\r",
							"let req_age = req.age;\r",
							"pm.test(\"u_age\", function (){\r",
							"    pm.expect(JSON.stringify(u_age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request):\r",
							"let u_salary_5_years = jsonData.person.u_salary_5_years;\r",
							"let req_salary_5_years = req.salary*4.2;\r",
							"pm.test(\"u_salary_5_years\", function (){\r",
							"    pm.expect(u_salary_5_years).to.eql(req_salary_5_years);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person:\r",
							"let person_array = jsonData.person;\r",
							"for(let i=0; i < person_array.length; i++){\r",
							"    console.log(i, person_array[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mariya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "age",
			"value": "",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "",
			"type": "string"
		}
	]
}
